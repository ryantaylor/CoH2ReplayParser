initSidebarItems({"enum":[["CmdType","This type contains a numerical `u8` representation of every command/action possible in a CoH2 command sequence. Contents of this enum provided by Relic Entertainment."],["Error","This type contains the various error messages that can be returned from the library."]],"fn":[["free_cstring","Extern function for deallocating a `CString` returned by `parse_to_cstring`."],["parse_any","Parses the given filepath based on its metadata. Accepted are directories, replay files (with or without `.rec` based on the value of `strict`), and archives (`.zip`). The return value is always a `Vec`, even if a single replay file is given as input. This function can be enabled with the `parse-all` feature."],["parse_archive","Parses all replay (`.rec`) files in a `.zip` archive. This function can be enabled with the `parse-archive` feature."],["parse_directory","Parses all replay and archive (`.zip`) files in the first level of the given directory. This function can be enabled with the `parse-all` feature."],["parse_replay","Parses a single replay (`.rec`) file."],["parse_to_cstring","Extern function for invoking a parse operation across FFI. Returns a Vault type serialized to JSON."],["print_version","Prints out the current vault version and compatible CoH2 game versions."]],"struct":[["ChatLine","This type represents a single Company of Heroes 2 chat message."],["Command","This type represents a single Company of Heroes 2 player command."],["Config","This type contains option and configuration information for a call to one of `vault`'s parsing functions."],["Item","This type contains a parsed representation of an item that can be equipped in a CoH2 replay."],["Map","This type represents a Company of Heroes 2 map as presented in a CoH2 replay file."],["Player","This type represents a Company of Heroes 2 player entity as it appears in a CoH2 replay file."],["Replay","The main `Replay` type, contains all currently parsed replay data. Can be serialized to JSON for output using `rustc_serialize`."]],"type":[["Result","Custom `Result` wrapper for `vault`, used to return `vault::Error` from every result."]]});